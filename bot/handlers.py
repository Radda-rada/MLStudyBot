import logging
import json
from telegram import Update
from telegram.ext import ContextTypes
from content.lessons import LESSONS
from content.quizzes import QUIZZES
from bot.keyboard import get_main_keyboard, get_lesson_keyboard
from utils.db_utils import (
    get_or_create_user, update_progress, get_user_progress,
    update_user_lesson
)
from bot.ai_helper import get_ml_explanation, analyze_ml_question, generate_ml_meme, get_random_ml_history
import time
import asyncio
from functools import lru_cache

logger = logging.getLogger(__name__)

# –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
@lru_cache(maxsize=100)
def get_cached_lesson(lesson_id: int):
    return LESSONS.get(lesson_id)

@lru_cache(maxsize=100)
def get_cached_quiz(quiz_id: int):
    return QUIZZES.get(quiz_id)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã start."""
    start_time = time.time()

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await asyncio.to_thread(
        get_or_create_user,
        telegram_id=update.effective_user.id,
        username=update.effective_user.username
    )
    logger.info(f"User creation/fetch took {time.time() - start_time:.2f} seconds")

    if not user:
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return

    welcome_message = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è!\n\n"
        "üéì –ó–¥–µ—Å—å –≤—ã –∏–∑—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤—ã ML:\n"
        "- –ë–∞–∑–æ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏\n"
        "- –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã\n"
        "- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"
    )

    await update.message.reply_text(
        welcome_message,
        reply_markup=get_main_keyboard()
    )
    logger.info(f"Total start command took {time.time() - start_time:.2f} seconds")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ\n"
        "/lesson - –ø–µ—Ä–µ–π—Ç–∏ –∫ —É—Ä–æ–∫–∞–º\n"
        "/quiz - –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç\n"
        "/progress - –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "/history - –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞\n"
        "/ask <–≤–æ–ø—Ä–æ—Å> - –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ ML\n"
        "/explain <—Ç–µ–º–∞> - –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ–º—ã\n"
        "/meme [—Ç–µ–º–∞] - –ø–æ–ª—É—á–∏—Ç—å –º–µ–º –ø—Ä–æ ML\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "‚ùì –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å?\n"
        "–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @raddayurieva"
    )
    await update.message.reply_text(help_text)

async def handle_lesson(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Ä–æ–∫–æ–≤."""
    start_time = time.time()

    user = await asyncio.to_thread(
        get_or_create_user,
        telegram_id=update.effective_user.id
    )
    if not user:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    lesson = get_cached_lesson(user.current_lesson)
    if not lesson:
        await update.message.reply_text(
            "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ —É—Ä–æ–∫–∏! üéâ"
        )
        return

    await update.message.reply_text(
        f"üìñ –£—Ä–æ–∫ {user.current_lesson}: {lesson['title']}\n\n{lesson['content']}",
        reply_markup=get_lesson_keyboard()
    )
    logger.info(f"Lesson handling took {time.time() - start_time:.2f} seconds")

async def handle_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ—Å—Ç–æ–≤."""
    start_time = time.time()

    user = await asyncio.to_thread(
        get_or_create_user,
        telegram_id=update.effective_user.id
    )
    if not user:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    quiz = get_cached_quiz(user.current_lesson)
    if not quiz:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤.")
        return

    context.user_data['current_quiz'] = quiz
    await update.message.reply_text(
        f"‚ùì –¢–µ—Å—Ç –ø–æ —Ç–µ–º–µ {quiz['title']}\n\n{quiz['question']}"
    )
    logger.info(f"Quiz handling took {time.time() - start_time:.2f} seconds")

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤."""
    start_time = time.time()

    user = await asyncio.to_thread(
        get_or_create_user,
        telegram_id=update.effective_user.id
    )
    if not user:
        return

    answer = update.message.text.upper()
    quiz = context.user_data.get('current_quiz')

    if not quiz:
        return

    if answer == quiz['correct_answer']:
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        success = await asyncio.to_thread(
            update_progress,
            user.id,
            user.current_lesson,
            100
        )
        if success:
            lesson_updated = await asyncio.to_thread(
                update_user_lesson,
                user.id,
                user.current_lesson + 1
            )
            if lesson_updated:
                await update.message.reply_text(
                    "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É.",
                    reply_markup=get_main_keyboard()
                )
                logger.info(f"Answer handling (correct) took {time.time() - start_time:.2f} seconds")
                return
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    else:
        await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    logger.info(f"Answer handling took {time.time() - start_time:.2f} seconds")

async def handle_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º."""
    start_time = time.time()

    user = await asyncio.to_thread(
        get_or_create_user,
        telegram_id=update.effective_user.id
    )
    if not user:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    progress = await asyncio.to_thread(get_user_progress, user.id)

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤
    total_lessons = len(LESSONS)
    completed_lessons = len([p for p in progress if p.completed]) if progress else 0
    completion_percentage = (completed_lessons / total_lessons) * 100 if total_lessons > 0 else 0

    # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    progress_bar = "‚ñì" * int(completion_percentage / 10) + "‚ñë" * (10 - int(completion_percentage / 10))

    if progress:
        avg_score = sum(p.quiz_score for p in progress) / len(progress)
        progress_text = (
            f"üìä –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:\n\n"
            f"–ü—Ä–æ–≥—Ä–µ—Å—Å –∫—É—Ä—Å–∞: [{progress_bar}] {completion_percentage:.1f}%\n\n"
            f"üìö –¢–µ–∫—É—â–∏–π —É—Ä–æ–∫: {user.current_lesson}/{total_lessons}\n"
            f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —É—Ä–æ–∫–æ–≤: {completed_lessons}\n"
            f"üìù –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg_score:.1f}/100\n\n"
            f"üéØ –û—Å—Ç–∞–ª–æ—Å—å —É—Ä–æ–∫–æ–≤: {total_lessons - completed_lessons}\n\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—É—á–µ–Ω–∏–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /lesson –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É."
        )
    else:
        progress_text = (
            f"üìä –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:\n\n"
            f"–ü—Ä–æ–≥—Ä–µ—Å—Å –∫—É—Ä—Å–∞: [‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë] 0%\n\n"
            f"üìö –¢–µ–∫—É—â–∏–π —É—Ä–æ–∫: 1/{total_lessons}\n"
            f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —É—Ä–æ–∫–æ–≤: 0\n"
            f"üìù –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: 0.0/100\n\n"
            f"üéØ –û—Å—Ç–∞–ª–æ—Å—å —É—Ä–æ–∫–æ–≤: {total_lessons}\n\n"
            f"–ù–∞—á–Ω–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /lesson –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–µ—Ä–≤–æ–º—É —É—Ä–æ–∫—É."
        )

    await update.message.reply_text(progress_text)
    logger.info(f"Progress handling took {time.time() - start_time:.2f} seconds")

async def handle_explain(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π."""
    if not context.args:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /explain"
        )
        return

    topic = " ".join(context.args)
    explanation = get_ml_explanation(topic)
    await update.message.reply_text(explanation)

    if "‚ùì" in explanation:
        context.user_data['last_explanation'] = topic
        context.user_data['last_question'] = explanation.split("‚ùì")[-1].strip()

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤."""
    user = await asyncio.to_thread(
        get_or_create_user,
        telegram_id=update.effective_user.id
    )
    if not user:
        return

    answer = update.message.text.upper()
    quiz = context.user_data.get('current_quiz')

    if quiz and answer == quiz['correct_answer']:
        if update_progress(user.id, user.current_lesson, 100):
            if update_user_lesson(user.id, user.current_lesson + 1):
                await update.message.reply_text(
                    "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É.",
                    reply_markup=get_main_keyboard()
                )
                return
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    elif quiz:
        await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def handle_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle the /history command to show random ML history facts."""
    history_data = get_random_ml_history()

    try:
        data = json.loads(history_data)
        context.user_data['current_history_test'] = data

        await update.message.reply_text(
            f"üìö {data['history']}\n\n"
            f"‚ùì –¢–µ—Å—Ç –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ:\n{data['question']}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç (A, B –∏–ª–∏ C):"
        )
    except Exception as e:
        logger.error(f"Error parsing history data: {str(e)}")
        await update.message.reply_text(
            "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π —Å–ø—Ä–∞–≤–∫–∏.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\n"
            "‚ùì –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @raddayurieva"
        )

async def handle_ask(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ask"
        )
        return

    question = " ".join(context.args)
    answer = analyze_ml_question(question)
    await update.message.reply_text(answer)


async def handle_meme(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle the /meme command to generate ML-related memes."""
    concept = " ".join(context.args) if context.args else None

    # Validate concept if provided
    if concept:
        if len(concept) > 100:
            await update.message.reply_text(
                "üòÖ –¢–µ–º–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –µ—ë –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
                "‚ùì –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @raddayurieva"
            )
            return

        # Check for potentially problematic characters
        if any(char in concept for char in ['@', '#', '$', '%', '&', '*', '<', '>', '/']):
            await update.message.reply_text(
                "üòÖ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø—Ä–æ—Å—Ç—ã–µ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –≤ —Ç–µ–º–µ.\n\n"
                "‚ùì –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @raddayurieva"
            )
            return

    await update.message.reply_text(
        "üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –º–µ–º" + (f" –ø—Ä–æ {concept}" if concept else "") + "...\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
    )

    try:
        meme_url = generate_ml_meme(concept)
        if meme_url:
            await update.message.reply_photo(
                photo=meme_url,
                caption="ü§ñ –í–∞—à –º–µ–º –æ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏!" + 
                       (f"\n–¢–µ–º–∞: {concept}" if concept else "") +
                       "\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /meme [—Ç–µ–º–∞] –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–º–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–µ–º—É" +
                       "\n‚ùì –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @raddayurieva"
            )
        else:
            await update.message.reply_text(
                "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–µ–º. " +
                ("–í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥—É—é —Ç–µ–º—É –∏–ª–∏ " if concept else "") +
                "–ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.\n\n"
                "‚ùì –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å?\n"
                "–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @raddayurieva"
            )
    except Exception as e:
        logger.error(f"Error in handle_meme: {str(e)}")
        await update.message.reply_text(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–º–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\n"
            "‚ùì –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @raddayurieva"
        )