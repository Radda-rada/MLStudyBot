import logging
import json
import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from content.lessons import LESSONS
from content.quizzes import QUIZZES
from bot.keyboard import get_main_keyboard, get_lesson_keyboard, get_history_keyboard
from utils.db_utils import (
    get_or_create_user, update_progress, get_user_progress,
    update_user_lesson, get_user_statistics, get_all_users_statistics
)
from bot.ai_helper import get_ml_explanation, analyze_ml_question, generate_ml_meme, get_random_ml_history
import time
import asyncio
from functools import lru_cache

logger = logging.getLogger(__name__)

# Add this at the top of the file
_LESSONS_CACHE = {}
_QUIZZES_CACHE = {}

def _init_caches():
    """Initialize caches for lessons and quizzes"""
    global _LESSONS_CACHE, _QUIZZES_CACHE
    _LESSONS_CACHE.clear()
    _QUIZZES_CACHE.clear()
    _LESSONS_CACHE.update(LESSONS)
    _QUIZZES_CACHE.update(QUIZZES)
    logger.info(f"Caches initialized: {len(_LESSONS_CACHE)} lessons, {len(_QUIZZES_CACHE)} quizzes")

# Initialize caches
_init_caches()

@lru_cache(maxsize=100)
def get_cached_lesson(lesson_id: int):
    """Get lesson from cache with improved error handling"""
    try:
        lesson = _LESSONS_CACHE.get(lesson_id)
        if lesson:
            logger.debug(f"Cache hit for lesson {lesson_id}")
            return lesson
        logger.warning(f"Lesson {lesson_id} not found in cache")
        return None
    except Exception as e:
        logger.error(f"Error getting cached lesson {lesson_id}: {str(e)}")
        return None

@lru_cache(maxsize=100)
def get_cached_quiz(quiz_id: int):
    """Get quiz from cache with improved error handling"""
    try:
        quiz = _QUIZZES_CACHE.get(quiz_id)
        if quiz:
            logger.debug(f"Cache hit for quiz {quiz_id}")
            return quiz
        logger.warning(f"Quiz {quiz_id} not found in cache")
        return None
    except Exception as e:
        logger.error(f"Error getting cached quiz {quiz_id}: {str(e)}")
        return None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã start."""
    logger.info(f"Received /start command from user {update.effective_user.id}")
    start_time = time.time()

    try:
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await asyncio.to_thread(
            get_or_create_user,
            telegram_id=update.effective_user.id,
            username=update.effective_user.username
        )
        logger.debug(f"get_or_create_user result: {user}")
        logger.info(f"User creation/fetch took {time.time() - start_time:.2f} seconds")

        if not user:
            logger.error(f"Failed to create/get user for telegram_id {update.effective_user.id}")
            await update.message.reply_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∑–∞—Ä–∞–Ω–µ–µ
        keyboard = get_main_keyboard()
        logger.debug("Created main keyboard")

        welcome_message = (
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è!\n\n"
            "üéì –ó–¥–µ—Å—å –≤—ã –∏–∑—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤—ã ML:\n"
            "- –ë–∞–∑–æ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏\n"
            "- –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã\n"
            "- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"
        )

        try:
            logger.info(f"Attempting to send welcome message to user {update.effective_user.id}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            result = await update.message.reply_text(
                text=welcome_message,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            logger.info(f"Successfully sent welcome message. Message ID: {result.message_id}")
        except Exception as e:
            logger.error(f"Failed to send welcome message: {str(e)}", exc_info=True)
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            try:
                await update.message.reply_text(
                    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç! –ï—Å–ª–∏ –º–µ–Ω—é –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç –∫–æ–º–∞–Ω–¥–æ–π /start",
                    parse_mode='HTML'
                )
            except Exception as simple_e:
                logger.error(f"Failed to send simplified message: {str(simple_e)}", exc_info=True)

    except Exception as e:
        logger.error(f"Error in start handler: {str(e)}", exc_info=True)
        try:
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode='HTML'
            )
        except Exception as send_error:
            logger.error(f"Failed to send error message: {str(send_error)}", exc_info=True)

    logger.info(f"Total start command processing took {time.time() - start_time:.2f} seconds")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ\n"
        "/lesson - –ø–µ—Ä–µ–π—Ç–∏ –∫ —É—Ä–æ–∫–∞–º\n"
        "/quiz - –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç\n"
        "/progress - –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "/history - –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞\n"
        "/ask <–≤–æ–ø—Ä–æ—Å> - –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ ML\n"
        "/explain <—Ç–µ–º–∞> - –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ–º—ã\n"
        "/meme [—Ç–µ–º–∞] - –ø–æ–ª—É—á–∏—Ç—å –º–µ–º –ø—Ä–æ ML\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "‚ùì –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å?\n"
        "–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @raddayurieva"
    )
    await update.message.reply_text(help_text, parse_mode='HTML')

async def handle_lesson(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Ä–æ–∫–æ–≤."""
    start_time = time.time()
    logger.info(f"Starting handle_lesson for user {update.effective_user.id}")

    try:
        user = await asyncio.to_thread(
            get_or_create_user,
            telegram_id=update.effective_user.id
        )
        if not user:
            logger.error(f"Failed to get/create user for telegram_id {update.effective_user.id}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode='HTML'
            )
            return

        lesson = get_cached_lesson(user.current_lesson)
        logger.debug(f"Retrieved lesson data for lesson_id {user.current_lesson}: {bool(lesson)}")

        if not lesson:
            if user.current_lesson > len(_LESSONS_CACHE):
                await update.message.reply_text(
                    "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ —É—Ä–æ–∫–∏!",
                    parse_mode='HTML'
                )
            else:
                logger.error(f"Failed to retrieve lesson {user.current_lesson}")
                await update.message.reply_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Ä–æ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    parse_mode='HTML'
                )
            return

        try:
            lesson_message = (
                f"üìñ –£—Ä–æ–∫ {user.current_lesson}: {lesson['title']}\n\n"
                f"{lesson['content']}\n\n"
                f"‚ùì –ü—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å:\n"
                f"{lesson['check_question']}\n\n"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
            for option in lesson['check_options']:
                lesson_message += f"{option}\n"

            lesson_message += "\nüìö –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:\n"
            for material in lesson['materials']:
                lesson_message += f"{material}\n"

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –≤–æ–ø—Ä–æ—Å–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data['current_check'] = {
                'lesson_id': user.current_lesson,
                'correct_answer': lesson['check_correct']
            }

            keyboard = get_lesson_keyboard()
            await update.message.reply_text(
                lesson_message,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            logger.info(f"Successfully sent lesson {user.current_lesson} to user {update.effective_user.id}")

        except KeyError as ke:
            logger.error(f"Missing key in lesson data: {ke}")
            await update.message.reply_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ—ë –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º.",
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"Error formatting lesson message: {str(e)}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —É—Ä–æ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode='HTML'
            )

    except Exception as e:
        logger.error(f"Error in handle_lesson: {str(e)}", exc_info=True)
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Ä–æ–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode='HTML'
        )

    finally:
        logger.info(f"Lesson handling took {time.time() - start_time:.2f} seconds")

async def handle_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ—Å—Ç–æ–≤."""
    start_time = time.time()

    user = await asyncio.to_thread(
        get_or_create_user,
        telegram_id=update.effective_user.id
    )
    if not user:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    quiz = get_cached_quiz(user.current_lesson)
    if not quiz:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ—Å—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['current_quiz'] = {
        'quiz_id': user.current_lesson,
        'correct_answer': quiz['correct_answer'],
        'title': quiz['title']
    }

    logger.info(f"Setting quiz for user {user.id}, lesson {user.current_lesson}")

    await update.message.reply_text(
        f"‚ùì –¢–µ—Å—Ç –ø–æ —Ç–µ–º–µ {quiz['title']}\n\n{quiz['question']}",
        parse_mode='HTML'
    )
    logger.info(f"Quiz handling took {time.time() - start_time:.2f} seconds")

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –∏ –∫–Ω–æ–ø–æ–∫."""
    start_time = time.time()
    logger.info(f"Starting handle_answer for user {update.effective_user.id}")

    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
        text = update.message.text
        logger.debug(f"Received button text: '{text}'")  # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        normalized_text = text.strip() if text else ""

        # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫ –∏ –¥–µ–π—Å—Ç–≤–∏–π
        button_actions = {
            "üìö –£—Ä–æ–∫": handle_lesson,
            "üìö –ö —Å–ø–∏—Å–∫—É —É—Ä–æ–∫–æ–≤": handle_lesson,
            "üìö –ö —É—Ä–æ–∫–∞–º": handle_lesson,
            "‚ùì –¢–µ—Å—Ç": handle_quiz,
            "üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç": handle_quiz,
            "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å": handle_progress,
            "üìú –ò—Å—Ç–æ—Ä–∏—è": handle_history,
            "üîÑ –î—Ä—É–≥–∞—è –∏—Å—Ç–æ—Ä–∏—è": handle_history,
            "üé® –ú–µ–º": handle_meme,
            "‚ùì –ü–æ–º–æ—â—å": help_command
        }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ –¥–µ–π—Å—Ç–≤–∏–π
        if normalized_text in button_actions:
            logger.info(f"Handling button press: {normalized_text}")
            await button_actions[normalized_text](update, context)
            return

        # –ï—Å–ª–∏ –Ω–µ –∫–Ω–æ–ø–∫–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
        user = await asyncio.to_thread(
            get_or_create_user,
            telegram_id=update.effective_user.id
        )
        if not user:
            logger.error(f"Failed to get/create user for telegram_id {update.effective_user.id}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_keyboard(),
                parse_mode='HTML'
            )
            return

        answer = update.message.text.upper()
        logger.debug(f"Received answer: {answer} from user {update.effective_user.id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—É—â–∏–π —Ç–µ—Å—Ç –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        current_quiz = context.user_data.get('current_quiz')
        current_check = context.user_data.get('current_check')
        current_history_test = context.user_data.get('current_history_test')

        if current_history_test:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç
            if answer == current_history_test.get('correct_answer', ''):
                await update.message.reply_text(
                    f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n\n{current_history_test.get('explanation', '')}",
                    reply_markup=get_history_keyboard(),
                    parse_mode='HTML'
                )
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é —Å–ø—Ä–∞–≤–∫—É.",
                    reply_markup=get_history_keyboard(),
                    parse_mode='HTML'
                )
            context.user_data.pop('current_history_test', None)
            return

        if not current_quiz and not current_check:
            logger.warning(f"No active quiz or check for user {update.effective_user.id}")
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /lesson —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —É—Ä–æ–∫ –∏–ª–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.",
                reply_markup=get_main_keyboard(),
                parse_mode='HTML'
            )
            return

        if current_check:
            logger.info(f"Processing check question answer for lesson {current_check['lesson_id']}")
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å
            if answer == current_check['correct_answer']:
                await update.message.reply_text(
                    "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∫ —ç—Ç–æ–º—É —É—Ä–æ–∫—É.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /quiz –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
                    reply_markup=get_main_keyboard(),
                    parse_mode='HTML'
                )
                logger.info(f"Correct answer for check question, lesson {current_check['lesson_id']}")
                context.user_data.pop('current_check', None)
            else:
                lesson = get_cached_lesson(current_check['lesson_id'])
                if lesson:
                    hint_message = (
                        "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n"
                        "–ü–æ–¥—Å–∫–∞–∑–∫–∞: –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª —É—Ä–æ–∫–∞\n\n"
                        f"–í–æ–ø—Ä–æ—Å: {lesson['check_question']}\n"
                    )
                    for option in lesson['check_options']:
                        hint_message += f"{option}\n"

                    await update.message.reply_text(
                        hint_message,
                        reply_markup=get_lesson_keyboard(),
                        parse_mode='HTML'
                    )
                else:
                    await update.message.reply_text(
                        "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                        reply_markup=get_lesson_keyboard(),
                        parse_mode='HTML'
                    )
                logger.info(f"Incorrect answer for check question from user {user.id}")
            return

        if current_quiz:
            logger.info(f"Processing quiz answer for quiz {current_quiz['quiz_id']}")
            if answer == current_quiz['correct_answer']:
                # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                success = await asyncio.to_thread(
                    update_progress,
                    user.id,
                    current_quiz['quiz_id'],
                    100
                )

                if success:
                    logger.info(f"Progress updated for user {user.id}, lesson {current_quiz['quiz_id']}")
                    next_lesson = current_quiz['quiz_id'] + 1

                    # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    lesson_updated = await asyncio.to_thread(
                        update_user_lesson,
                        user.id,
                        next_lesson
                    )

                    if lesson_updated:
                        context.user_data.pop('current_quiz', None)
                        await update.message.reply_text(
                            "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É.\n"
                            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /lesson –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞.",
                            reply_markup=get_main_keyboard(),
                            parse_mode='HTML'
                        )
                        logger.info(f"User {user.id} moved to next lesson {next_lesson}")
                        return
                    else:
                        logger.error(f"Failed to update user {user.id} to lesson {next_lesson}")
                else:
                    logger.error(f"Failed to update progress for user {user.id}")

                await update.message.reply_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=get_main_keyboard(),
                    parse_mode='HTML'
                )
            else:
                quiz = get_cached_quiz(current_quiz['quiz_id'])
                if quiz:
                    await update.message.reply_text(
                        f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n"
                        f"–í–æ–ø—Ä–æ—Å: {quiz['question']}\n"
                        "–ü–æ–¥—Å–∫–∞–∑–∫–∞: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–æ–π –±—É–∫–≤–æ–π (A, B –∏–ª–∏ C)",
                        reply_markup=get_main_keyboard(),
                        parse_mode='HTML'
                    )
                else:
                    await update.message.reply_text(
                        "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n"
                        "–ü–æ–¥—Å–∫–∞–∑–∫–∞: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–æ–π –±—É–∫–≤–æ–π (A, B –∏–ª–∏ C)",
                        reply_markup=get_main_keyboard(),
                        parse_mode='HTML'
                    )
                logger.info(f"Incorrect quiz answer from user {user.id}")

    except Exception as e:
        logger.error(f"Error in handle_answer: {str(e)}", exc_info=True)
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard(),
            parse_mode='HTML'
        )

    finally:
        logger.info(f"Answer handling took {time.time() - start_time:.2f} seconds")

async def handle_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º."""
    start_time = time.time()
    logger.info(f"Starting handle_progress for user {update.effective_user.id}")

    try:
        user = await asyncio.to_thread(
            get_or_create_user,
            telegram_id=update.effective_user.id
        )
        if not user:
            logger.error(f"Failed to get/create user for telegram_id {update.effective_user.id}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode='HTML'
            )
            return

        progress = await asyncio.to_thread(get_user_progress, user.id)
        logger.debug(f"Retrieved progress data for user {user.id}: {bool(progress)}")

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤ –∏–∑ –∫—ç—à–∞
        total_lessons = len(_LESSONS_CACHE)
        completed_lessons = len([p for p in progress if p.completed]) if progress else 0
        completion_percentage = (completed_lessons / total_lessons) * 100 if total_lessons > 0 else 0

        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_bar = "‚ñì" * int(completion_percentage / 10) + "‚ñë" * (10 - int(completion_percentage / 10))

        if progress:
            avg_score = sum(p.quiz_score for p in progress) / len(progress)
            progress_text = (
                f"üìä –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:\n\n"
                f"–ü—Ä–æ–≥—Ä–µ—Å—Å –∫—É—Ä—Å–∞: [{progress_bar}] {completion_percentage:.1f}%\n\n"
                f"üìö –¢–µ–∫—É—â–∏–π —É—Ä–æ–∫: {user.current_lesson}/{total_lessons}\n"
                f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —É—Ä–æ–∫–æ–≤: {completed_lessons}\n"
                f"üìù –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg_score:.1f}/100\n\n"
                f"üéØ –û—Å—Ç–∞–ª–æ—Å—å —É—Ä–æ–∫–æ–≤: {total_lessons - completed_lessons}\n\n"
                f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—É—á–µ–Ω–∏–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /lesson –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É."
            )
        else:
            progress_text = (
                f"üìä –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:\n\n"
                f"–ü—Ä–æ–≥—Ä–µ—Å—Å –∫—É—Ä—Å–∞: [‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë] 0%\n\n"
                f"üìö –¢–µ–∫—É—â–∏–π —É—Ä–æ–∫: 1/{total_lessons}\n"
                f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —É—Ä–æ–∫–æ–≤: 0\n"
                f"üìù –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: 0.0/100\n\n"
                f"üéØ –û—Å—Ç–∞–ª–æ—Å—å —É—Ä–æ–∫–æ–≤: {total_lessons}\n\n"
                f"–ù–∞—á–Ω–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /lesson –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–µ—Ä–≤–æ–º—É —É—Ä–æ–∫—É."
            )

        await update.message.reply_text(
            progress_text,
            parse_mode='HTML',
            reply_markup=get_main_keyboard()
        )
        logger.info(f"Successfully sent progress to user {update.effective_user.id}")

    except Exception as e:
        logger.error(f"Error in handle_progress: {str(e)}", exc_info=True)
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode='HTML'
        )

    finally:
        logger.info(f"Progress handling took {time.time() - start_time:.2f} seconds")

async def handle_explain(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π."""
    if not context.args:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /explain",
            parse_mode='HTML'
        )
        return

    topic = " ".join(context.args)
    explanation = get_ml_explanation(topic)
    await update.message.reply_text(explanation, parse_mode='HTML')

    if "‚ùì" in explanation:
        context.user_data['last_explanation'] = topic
        context.user_data['last_question'] = explanation.split("‚ùì")[-1].strip()

async def handle_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle the /history command to show random ML history facts."""
    logger.info(f"Starting handle_history for user {update.effective_user.id}")
    try:
        await update.message.reply_text(
            "üïí –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é —Å–ø—Ä–∞–≤–∫—É...",
            parse_mode='HTML'
        )

        history_data = get_random_ml_history()
        logger.debug(f"Got history data: {bool(history_data)}")

        try:
            data = history_data if isinstance(history_data, dict) else json.loads(history_data)

            if not all(key in data for key in ['history', 'question', 'correct_answer', 'explanation']):
                raise ValueError("Missing required fields in history data")

            context.user_data['current_history_test'] = {
                'correct_answer': data['correct_answer'],
                'explanation': data['explanation']
            }

            keyboard = get_history_keyboard()

            message = (
                f"üìö {data['history']}\n\n"
                f"‚ùì –¢–µ—Å—Ç –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ:\n{data['question']}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç (A, B –∏–ª–∏ C):"
            )

            await update.message.reply_text(
                message,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            logger.info(f"Successfully sent history to user {update.effective_user.id}")

        except (json.JSONDecodeError, ValueError, KeyError) as e:
            logger.error(f"Error processing history data: {str(e)}")
            await update.message.reply_text(
                "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π —Å–ø—Ä–∞–≤–∫–∏.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /history",
                reply_markup=get_main_keyboard(),
                parse_mode='HTML'
            )

    except Exception as e:
        logger.error(f"Error in handle_history: {str(e)}", exc_info=True)
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard(),
            parse_mode='HTML'
        )

async def handle_ask(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ask",
            parse_mode='HTML'
        )
        return

    question = " ".join(context.args)
    answer = analyze_ml_question(question)
    await update.message.reply_text(answer, parse_mode='HTML')


async def handle_meme(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle the /meme command to generate ML-related memes."""
    concept = " ".join(context.args) if context.args else None

    # Validate concept if provided
    if concept:
        if len(concept) > 100:
            await update.message.reply_text(
                "üòÖ –¢–µ–º–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –µ—ë –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
                "‚ùì –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @raddayurieva",
                parse_mode='HTML'
            )
            return

        # Check for potentially problematic characters
        if any(char in concept for char in ['@', '#', '$', '%', '&', '*', '<', '>', '/']):
            await update.message.reply_text(
                "üòÖ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø—Ä–æ—Å—Ç—ã–µ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –≤ —Ç–µ–º–µ.\n\n"
                "‚ùì –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @raddayurieva",
                parse_mode='HTML'
            )
            return

    await update.message.reply_text(
        "üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –º–µ–º" + (f" –ø—Ä–æ {concept}" if concept else "") + "...\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
        parse_mode='HTML'
    )

    try:
        meme_url = generate_ml_meme(concept)
        if meme_url:
            await update.message.reply_photo(
                photo=meme_url,
                caption="ü§ñ –í–∞—à –º–µ–º –æ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏!" + 
                       (f"\n–¢–µ–º–∞: {concept}" if concept else "") +
                       "\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /meme [—Ç–µ–º–∞] –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–º–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–µ–º—É" +
                       "\n‚ùì –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @raddayurieva",
                parse_mode='HTML'
            )
        else:
            await update.message.reply_text(
                "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–µ–º. " +
                ("–í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥—É—é —Ç–µ–º—É –∏–ª–∏ " if concept else "") +
                "–ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.\n\n"
                "‚ùì –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å?\n"
                "–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @raddayurieva",
                parse_mode='HTML'
            )
    except Exception as e:
        logger.error(f"Error in handle_meme: {str(e)}")
        await update.message.reply_text(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–º–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\n"
            "‚ùì –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @raddayurieva",
            parse_mode='HTML'
        )


async def handle_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∞."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    ADMIN_ID = int(os.environ.get("ADMIN_TELEGRAM_ID", "0"))
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.",
            parse_mode='HTML'
        )
        return

    all_stats = await asyncio.to_thread(get_all_users_statistics)

    if not all_stats:
        await update.message.reply_text(
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
            parse_mode='HTML'
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    stats_message = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"

    for user_stat in all_stats:
        stats_message += (
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_stat['username']}\n"
            f"üìö –¢–µ–∫—É—â–∏–π —É—Ä–æ–∫: {user_stat['current_lesson']}\n"
            f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —É—Ä–æ–∫–æ–≤: {user_stat['completed_lessons']}\n"
            f"üìù –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {user_stat['average_score']:.1f}\n"
            f"üîÑ –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {user_stat['total_attempts']}\n"
            f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_stat['last_activity'].strftime('%Y-%m-%d %H:%M')}\n"
            "-------------------\n"
        )

    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    MAX_MESSAGE_LENGTH = 4096
    for i in range(0, len(stats_message), MAX_MESSAGE_LENGTH):
        await update.message.reply_text(
            stats_message[i:i + MAX_MESSAGE_LENGTH],
            parse_mode='HTML'
        )

async def handle_user_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    ADMIN_ID = int(os.environ.get("ADMIN_TELEGRAM_ID", "0"))

    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.",
            parse_mode='HTML'
        )
        return

    if not context.args:
        await update.message.reply_text(
            "–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ü—Ä–∏–º–µ—Ä: /user_stats 123456789",
            parse_mode='HTML'
        )
        return

    try:
        user_id = int(context.args[0])
        stats = await asyncio.to_thread(get_user_statistics, user_id)

        if not stats:
            await update.message.reply_text(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
                parse_mode='HTML'
            )
            return

        stats_message = (
            f"üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n\n"
            f"‚è∞ –û–±—â–µ–µ –≤—Ä–µ–º—è: {stats['total_time_spent']} –º–∏–Ω—É—Ç\n"
            f"üìù –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {stats['average_score']:.1f}\n"
            f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —É—Ä–æ–∫–æ–≤: {stats['completed_lessons']}\n"
            f"üîÑ –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {stats['total_attempts']}\n"
            f"üëç –£—Å–ø–µ—à–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫: {stats['successful_attempts']}\n"
            f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {stats['success_rate']:.1f}%\n"
            f"üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {stats['last_activity'].strftime('%Y-%m-%d %H:%M')}"
        )

        await update.message.reply_text(stats_message, parse_mode='HTML')

    except ValueError:
        await update.message.message.reply_text(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.",
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"Error in handle_user_stats: {str(e)}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
            parse_mode='HTML'
        )