import logging
from telegram import Update
from telegram.ext import ContextTypes
from models import User
from app import db, app
from content.lessons import LESSONS
from content.quizzes import QUIZZES
from bot.keyboard import get_main_keyboard, get_lesson_keyboard
from utils.db_utils import get_or_create_user, update_progress, get_user_progress
from bot.ai_helper import get_ml_explanation, analyze_ml_question

logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = get_or_create_user(
        telegram_id=update.effective_user.id,
        username=update.effective_user.username
    )

    if not user:
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return

    welcome_message = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è!\n\n"
        "üéì –ó–¥–µ—Å—å –≤—ã –∏–∑—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤—ã ML:\n"
        "- –ë–∞–∑–æ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏\n"
        "- –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã\n"
        "- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/lesson - –Ω–∞—á–∞—Ç—å —É—Ä–æ–∫\n"
        "/quiz - –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç\n"
        "/progress - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "/ask <–≤–æ–ø—Ä–æ—Å> - –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ ML\n"
        "/explain <—Ç–µ–º–∞> - –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ–º—ã"
    )

    await update.message.reply_text(
        welcome_message,
        reply_markup=get_main_keyboard()
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ\n"
        "/lesson - –ø–µ—Ä–µ–π—Ç–∏ –∫ —É—Ä–æ–∫–∞–º\n"
        "/quiz - –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç\n"
        "/progress - –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "/ask <–≤–æ–ø—Ä–æ—Å> - –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ ML\n"
        "/explain <—Ç–µ–º–∞> - –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ–º—ã\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    await update.message.reply_text(help_text)

async def handle_lesson(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = get_or_create_user(telegram_id=update.effective_user.id)
    if not user:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    lesson = LESSONS.get(user.current_lesson)

    if lesson:
        await update.message.reply_text(
            f"üìñ –£—Ä–æ–∫ {user.current_lesson}: {lesson['title']}\n\n{lesson['content']}",
            reply_markup=get_lesson_keyboard()
        )
    else:
        await update.message.reply_text("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–æ—à–ª–∏ –≤—Å–µ —É—Ä–æ–∫–∏! üéâ")

async def handle_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = get_or_create_user(telegram_id=update.effective_user.id)
    if not user:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    quiz = QUIZZES.get(user.current_lesson)

    if quiz:
        context.user_data['current_quiz'] = quiz
        await update.message.reply_text(
            f"‚ùì –¢–µ—Å—Ç –ø–æ —Ç–µ–º–µ {quiz['title']}\n\n{quiz['question']}"
        )
    else:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤.")

async def handle_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = get_or_create_user(telegram_id=update.effective_user.id)
    if not user:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    progress = get_user_progress(user.id)

    if progress:
        progress_text = (
            f"üìä –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:\n"
            f"–¢–µ–∫—É—â–∏–π —É—Ä–æ–∫: {user.current_lesson}\n"
            f"–ü—Ä–æ–π–¥–µ–Ω–æ —É—Ä–æ–∫–æ–≤: {len(progress)}\n"
            f"–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {sum([p.quiz_score for p in progress])/len(progress):.1f}"
        )
    else:
        progress_text = (
            f"üìä –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:\n"
            f"–¢–µ–∫—É—â–∏–π —É—Ä–æ–∫: {user.current_lesson}\n"
            f"–ü—Ä–æ–π–¥–µ–Ω–æ —É—Ä–æ–∫–æ–≤: 0\n"
            f"–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: 0.0"
        )

    await update.message.reply_text(progress_text)

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = get_or_create_user(telegram_id=update.effective_user.id)
    if not user:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    quiz = context.user_data.get('current_quiz')

    if quiz and update.message.text.lower() == quiz['correct_answer'].lower():
        if update_progress(user.id, user.current_lesson, 100):
            with app.app_context():
                user = User.query.get(user.id)  # Refresh user from database
                user.current_lesson += 1
                db.session.commit()

            await update.message.reply_text(
                "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É.",
                reply_markup=get_main_keyboard()
            )
        else:
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    elif quiz:
        await update.message.reply_text(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

async def handle_ask(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ask"
        )
        return

    question = " ".join(context.args)
    answer = analyze_ml_question(question)
    await update.message.reply_text(answer)

async def handle_explain(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /explain"
        )
        return

    topic = " ".join(context.args)
    explanation = get_ml_explanation(topic)
    await update.message.reply_text(explanation)